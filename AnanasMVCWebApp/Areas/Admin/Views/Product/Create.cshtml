@using AnanasMVCWebApp.Areas.Admin.Models
@model ProductBaseEM
@{
    ViewData["Title"] = "Product Create";
}
@section Scripts {
    <script>
        var variantContainer = $("#variantContainer");

        var categorySelect = $("#CategoryId");
        var styleSelect = $("#StyleId");
        var collectionSelect = $("#CollectionId");
        var styleFormRow = $("#styleFormRow");

        collectionSelect.change(function () {
            variantContainer.empty();
        });
        categorySelect.change(function () {
            variantContainer.empty();

            switch ($(this).val()) {
                case categorySelect[0][1].value:
                    styleFormRow.show();
                    styleSelect.prop("hidden", false).prop("disabled", false)
                    break;
                case categorySelect[0][2].value:
                case categorySelect[0][3].value:
                    styleFormRow.hide();
                    styleSelect.prop("hidden", true).prop("disabled", true)
                    break;
                default:
                    break;
            }

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetCollections", "Product", new { Area = "Admin" })',
                dataType: "json",
                data: { id: parseInt($(this).val()) },
                contentType: "application/json; charset=utf-8",
                success: function (result){
                    collectionSelect.empty().append('<option value="" selected disabled>Dòng sản phẩm</option>');
                    if (this.value != ""){
                        result.forEach(item => {
                            collectionSelect.append(new Option(item.name, item.id));
                        });
                    }
                },
                error: function (error) {
                    alert("Some errors occured!");
                }
            });
        });

        var addVariantBtn = $("#add-variant-btn");
        addVariantBtn.click(function(){
            if (categorySelect.val() == null || collectionSelect.val() == null) {
                alert("Vui lòng chọn danh mục và dòng sản phẩm!");
            } else {
                $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetVariantTemplate", "Product", new { Area = "Admin" })',
                    data: { categoryId: categorySelect.val(),
                        collectionId: collectionSelect.val(), 
                        count: variantContainer.children().length },
                    contentType: "application/json; charset=utf-8",
                    success: function (result) {
                        variantContainer.append(result);
                        $(".variant-item.new .delete-variant-btn").bind({
                            click: function () {
                                if(confirm("Bạn có chắc chắn muốn xoá phân loại sản phẩm này?")){
                                    $(this).parent().remove();
                                }
                            }
                        });
                        $("input[type='color']").bind({
                            change: function () {
                                $(this).parent().css("background-color", $(this).val());
                            }
                        });
                        $("input[type='file']").bind({
                            change: function () {
                                console.log("Hello");
                                var fileList = $(this)[0].files;
                                $(this).closest(".image-grid").find(".image-item").remove();
                                for (let index = 0; index < fileList.length; index++) {
                                    $(`
                                        <div class="image-item">
                                            <div class="overlay"><i class="fa-solid fa-trash-can"></i></div>
                                            <img data-img-index="${index}" src="${URL.createObjectURL(fileList[index])}" alt="">
                                        </div>
                                    `).insertBefore($(this).parent());
                                    /*$(".image-item").bind({
                                        mouseenter: function (e) {
                                            $(this).find(".overlay").show();
                                        },
                                        mouseleave: function (e) {
                                            $(this).find(".overlay").hide();
                                        },
                                    });*/
                                }
                            }
                        })
                    },
                    error: function (req, err) {
                        console.log(err);
                        alert("Falied to create product variant template!");
                    }
                });
            }
            
        });
        
    </script>
    <script src="https://cdn.ckeditor.com/4.22.1/standard/ckeditor.js"></script>
    <script type="text/javascript">
        CKEDITOR.replace('Description')
    </script>
}
<div class="row-wrapper">
    <h4>Thêm sản phẩm</h4>
</div>
<div class="row-wrapper">
    <form asp-controller="Product" asp-action="Create" asp-area="Admin" method="POST" enctype="multipart/form-data" style="width: 100%;">
        <div class="form-wrapper">
            <div class="form-column">
                <div>
                    <h5>Thông tin cơ bản</h5>
                    <hr class="divider top">
                    @Html.HiddenFor(i => i.ProductId)
                    <div class="form-row">
                        <div class="input-group">
                            @Html.LabelFor(i => i.Name)
                            @Html.TextBoxFor(i => i.Name, new { placeholder = "Tên sản phẩm" })
                            @Html.ValidationMessageFor(i => i.Name, "", new { @class = "input-error" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="input-group">
                            @Html.LabelFor(i => i.CategoryId)
                            <select asp-for="CategoryId">
                                <option value="" selected disabled>Danh mục</option>
                                @foreach (var item in Model.Categories) {
                                    <option value=@item.Id>@item.Name</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(i => i.CategoryId, "", new { @class = "input-error" })
                        </div>
                    </div>
                    <div class="form-row" id="styleFormRow" style="display: none;">
                        <div class="input-group">
                            @Html.LabelFor(i => i.StyleId)
                            <select asp-for="StyleId" hidden disabled>
                                <option value="" selected disabled>Kiểu dáng</option>
                                @foreach (var item in Model.Styles) {
                                    <option value=@item.Id>@item.Name</option>
                                }
                            </select>
                            @Html.ValidationMessageFor(i => i.StyleId, "", new { @class = "input-error" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="input-group">
                            @Html.LabelFor(i => i.CollectionId)
                            <select asp-for="CollectionId">
                                <option value="" selected disabled>Dòng sản phẩm</option>
                            </select>
                            @Html.ValidationMessageFor(i => i.CollectionId, "", new { @class = "input-error" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="input-group">
                            @Html.LabelFor(i => i.Price)
                            @Html.TextBoxFor(i => i.Price, new { placeholder = "Giá bán" })
                            @Html.ValidationMessageFor(i => i.Price, "", new { @class = "input-error" })
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="input-group">
                            @Html.LabelFor(i => i.Description)
                            <div id="editor"></div>
                            @Html.TextAreaFor(i => i.Description, new { cols = "30", rows = "10", style = "resize: none;" })
                            @Html.ValidationMessageFor(i => i.Description, "", new { @class = "input-error" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-column">
                <div>
                    <h5>Thông tin phân loại</h5>
                    <hr class="divider top">
                    <div class="variant-list" id="variantContainer">
                        @* Append by AJAX call *@
                    </div>
                    <button id="add-variant-btn" type="button"><i class="fa-solid fa-plus"></i> Add Product Variant</button>
                    @Html.ValidationMessageFor(i => i.Variants, "", new { @class = "input-error" })
                </div>
                <div class="form-button-group">
                    <a asp-controller="Product" asp-action="Index" asp-area="Admin" id="discardBtn">Huỷ</a>
                    <button id="submitBtn" type="submit">Lưu</button>
                </div>
            </div>
        </div>
    </form>
</div>
